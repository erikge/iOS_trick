// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {
	};
	objectVersion = 46;
	objects = {

/* Begin PBXAggregateTarget section */
		0B0F938D184F64FC00A0874A /* merge2libs */ = {
			isa = PBXAggregateTarget;
			buildConfigurationList = 0B0F938E184F64FC00A0874A /* Build configuration list for PBXAggregateTarget "merge2libs" */;
			buildPhases = (
				0B0F9391184F650B00A0874A /* ShellScript */,
			);
			dependencies = (
			);
			name = merge2libs;
			productName = merge2libs;
		};
		0B27DF281850254D00C8B7F8 /* finalUni */ = {
			isa = PBXAggregateTarget;
			buildConfigurationList = 0B27DF291850254D00C8B7F8 /* Build configuration list for PBXAggregateTarget "finalUni" */;
			buildPhases = (
				0B27DF2C1850257E00C8B7F8 /* ShellScript */,
				0B27DF2D185025E400C8B7F8 /* ShellScript */,
				0B27DF2E185026CC00C8B7F8 /* CopyFiles */,
			);
			dependencies = (
			);
			name = finalUni;
			productName = finalUni;
		};
/* End PBXAggregateTarget section */

/* Begin PBXBuildFile section */
		0B27DF2F1850282D00C8B7F8 /* say_hi.h in CopyFiles */ = {isa = PBXBuildFile; fileRef = 6BD455B4184CC4BD00581686 /* say_hi.h */; };
		0B2C8743184F6CFE0056A291 /* CoreFoundation.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 6BD455BD184CCBBD00581686 /* CoreFoundation.framework */; };
		0B2C8749184F6CFE0056A291 /* InfoPlist.strings in Resources */ = {isa = PBXBuildFile; fileRef = 0B2C8747184F6CFE0056A291 /* InfoPlist.strings */; };
		0B2C8750184F6D2C0056A291 /* liblib-outof-workspace.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 0B2C8712184F69E70056A291 /* liblib-outof-workspace.a */; };
		0B2C8752184F6D3A0056A291 /* say_hi.h in Headers */ = {isa = PBXBuildFile; fileRef = 6BD455B4184CC4BD00581686 /* say_hi.h */; settings = {ATTRIBUTES = (Public, ); }; };
		0B2C875D184F703D0056A291 /* index.h in Headers */ = {isa = PBXBuildFile; fileRef = 0B2C875B184F703D0056A291 /* index.h */; };
		0B2C875E184F703D0056A291 /* index.mm in Sources */ = {isa = PBXBuildFile; fileRef = 0B2C875C184F703D0056A291 /* index.mm */; };
		0BBBDE3818506B61006A1BD1 /* InfoPlist.strings in Resources */ = {isa = PBXBuildFile; fileRef = 0BBBDE3618506B61006A1BD1 /* InfoPlist.strings */; };
		0BBBDE3C18506B61006A1BD1 /* finalUniByTemplate.m in Sources */ = {isa = PBXBuildFile; fileRef = 0BBBDE3B18506B61006A1BD1 /* finalUniByTemplate.m */; };
		0BBBDE4218506B61006A1BD1 /* XCTest.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 6BD4559C184CC1E000581686 /* XCTest.framework */; };
		0BBBDE4318506B61006A1BD1 /* Foundation.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 6BD4558E184CC1E000581686 /* Foundation.framework */; };
		0BBBDE4518506B61006A1BD1 /* UIKit.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 0BBBDE4418506B61006A1BD1 /* UIKit.framework */; };
		0BBBDE4818506B61006A1BD1 /* finalUniByTemplate.framework in Resources */ = {isa = PBXBuildFile; fileRef = 0BBBDE3218506B61006A1BD1 /* finalUniByTemplate.framework */; };
		0BBBDE4E18506B61006A1BD1 /* InfoPlist.strings in Resources */ = {isa = PBXBuildFile; fileRef = 0BBBDE4C18506B61006A1BD1 /* InfoPlist.strings */; };
		0BBBDE5018506B61006A1BD1 /* finalUniByTemplateTests.m in Sources */ = {isa = PBXBuildFile; fileRef = 0BBBDE4F18506B61006A1BD1 /* finalUniByTemplateTests.m */; };
		0BBBDE5718506B91006A1BD1 /* say_hi.c in Sources */ = {isa = PBXBuildFile; fileRef = 6BD455B5184CC4D300581686 /* say_hi.c */; };
		0BBBDE5818506BA2006A1BD1 /* say_hi.h in Headers */ = {isa = PBXBuildFile; fileRef = 6BD455B4184CC4BD00581686 /* say_hi.h */; settings = {ATTRIBUTES = (Public, ); }; };
		6BD4558F184CC1E000581686 /* Foundation.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 6BD4558E184CC1E000581686 /* Foundation.framework */; };
		6BD4559D184CC1E000581686 /* XCTest.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 6BD4559C184CC1E000581686 /* XCTest.framework */; };
		6BD4559E184CC1E000581686 /* Foundation.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 6BD4558E184CC1E000581686 /* Foundation.framework */; };
		6BD455A3184CC1E000581686 /* liblib-outof-workspace.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 6BD4558B184CC1E000581686 /* liblib-outof-workspace.a */; };
		6BD455A9184CC1E000581686 /* InfoPlist.strings in Resources */ = {isa = PBXBuildFile; fileRef = 6BD455A7184CC1E000581686 /* InfoPlist.strings */; };
		6BD455AB184CC1E000581686 /* lib_outof_workspaceTests.m in Sources */ = {isa = PBXBuildFile; fileRef = 6BD455AA184CC1E000581686 /* lib_outof_workspaceTests.m */; };
		6BD455B6184CC4D300581686 /* say_hi.c in Sources */ = {isa = PBXBuildFile; fileRef = 6BD455B5184CC4D300581686 /* say_hi.c */; };
		6BD455B7184CC4D300581686 /* say_hi.c in Sources */ = {isa = PBXBuildFile; fileRef = 6BD455B5184CC4D300581686 /* say_hi.c */; };
		6BD455BE184CCBBD00581686 /* CoreFoundation.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = 6BD455BD184CCBBD00581686 /* CoreFoundation.framework */; };
		6BD455C4184CCBBD00581686 /* InfoPlist.strings in Resources */ = {isa = PBXBuildFile; fileRef = 6BD455C2184CCBBD00581686 /* InfoPlist.strings */; };
		6BD455C9184CCDAB00581686 /* say_hi.c in Sources */ = {isa = PBXBuildFile; fileRef = 6BD455B5184CC4D300581686 /* say_hi.c */; };
		6BD455CE184CDBEE00581686 /* say_hi.h in Headers */ = {isa = PBXBuildFile; fileRef = 6BD455B4184CC4BD00581686 /* say_hi.h */; settings = {ATTRIBUTES = (Public, ); }; };
/* End PBXBuildFile section */

/* Begin PBXBuildRule section */
		0B2C875A184F6F4C0056A291 /* PBXBuildRule */ = {
			isa = PBXBuildRule;
			compilerSpec = com.apple.compilers.proxy.script;
			fileType = text.plist;
			isEditable = 1;
			outputFiles = (
			);
			script = "# builtin-copyPlist\n";
		};
/* End PBXBuildRule section */

/* Begin PBXContainerItemProxy section */
		0B2C874E184F6D120056A291 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 6BD45583184CC1E000581686 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = 0B0F938D184F64FC00A0874A;
			remoteInfo = merge2libs;
		};
		0BBBDE4618506B61006A1BD1 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 6BD45583184CC1E000581686 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = 0BBBDE3118506B61006A1BD1;
			remoteInfo = finalUniByTemplate;
		};
		6BD455A1184CC1E000581686 /* PBXContainerItemProxy */ = {
			isa = PBXContainerItemProxy;
			containerPortal = 6BD45583184CC1E000581686 /* Project object */;
			proxyType = 1;
			remoteGlobalIDString = 6BD4558A184CC1E000581686;
			remoteInfo = "lib-outof-workspace";
		};
/* End PBXContainerItemProxy section */

/* Begin PBXCopyFilesBuildPhase section */
		0B27DF2E185026CC00C8B7F8 /* CopyFiles */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = "${BUILD_DIR}/${CONFIGURATION}-iphoneuniversal/${PRODUCT_NAME}.framework/Versions/A/Headers";
			dstSubfolderSpec = 0;
			files = (
				0B27DF2F1850282D00C8B7F8 /* say_hi.h in CopyFiles */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		6BD45589184CC1E000581686 /* CopyFiles */ = {
			isa = PBXCopyFilesBuildPhase;
			buildActionMask = 2147483647;
			dstPath = "include/$(PRODUCT_NAME)";
			dstSubfolderSpec = 16;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXCopyFilesBuildPhase section */

/* Begin PBXFileReference section */
		0B27DF27185021E900C8B7F8 /* readme.txt */ = {isa = PBXFileReference; lastKnownFileType = text; path = readme.txt; sourceTree = "<group>"; };
		0B2C8712184F69E70056A291 /* liblib-outof-workspace.a */ = {isa = PBXFileReference; lastKnownFileType = archive.ar; name = "liblib-outof-workspace.a"; path = "DerivedData/lib-outof-workspace/Build/Products/Debug-universal/liblib-outof-workspace.a"; sourceTree = "<group>"; };
		0B2C8742184F6CFD0056A291 /* uniSay.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = uniSay.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		0B2C8746184F6CFE0056A291 /* uniSay-Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = "uniSay-Info.plist"; sourceTree = "<group>"; };
		0B2C8748184F6CFE0056A291 /* en */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = en; path = en.lproj/InfoPlist.strings; sourceTree = "<group>"; };
		0B2C874A184F6CFE0056A291 /* uniSay-Prefix.pch */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "uniSay-Prefix.pch"; sourceTree = "<group>"; };
		0B2C875B184F703D0056A291 /* index.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = index.h; sourceTree = "<group>"; };
		0B2C875C184F703D0056A291 /* index.mm */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.cpp.objcpp; path = index.mm; sourceTree = "<group>"; };
		0BBBDE3218506B61006A1BD1 /* finalUniByTemplate.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = finalUniByTemplate.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		0BBBDE3518506B61006A1BD1 /* finalUniByTemplate-Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = "finalUniByTemplate-Info.plist"; sourceTree = "<group>"; };
		0BBBDE3718506B61006A1BD1 /* en */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = en; path = en.lproj/InfoPlist.strings; sourceTree = "<group>"; };
		0BBBDE3918506B61006A1BD1 /* finalUniByTemplate-Prefix.pch */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "finalUniByTemplate-Prefix.pch"; sourceTree = "<group>"; };
		0BBBDE3A18506B61006A1BD1 /* finalUniByTemplate.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = finalUniByTemplate.h; sourceTree = "<group>"; };
		0BBBDE3B18506B61006A1BD1 /* finalUniByTemplate.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = finalUniByTemplate.m; sourceTree = "<group>"; };
		0BBBDE4118506B61006A1BD1 /* finalUniByTemplateTests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = finalUniByTemplateTests.xctest; sourceTree = BUILT_PRODUCTS_DIR; };
		0BBBDE4418506B61006A1BD1 /* UIKit.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = UIKit.framework; path = System/Library/Frameworks/UIKit.framework; sourceTree = SDKROOT; };
		0BBBDE4B18506B61006A1BD1 /* finalUniByTemplateTests-Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = "finalUniByTemplateTests-Info.plist"; sourceTree = "<group>"; };
		0BBBDE4D18506B61006A1BD1 /* en */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = en; path = en.lproj/InfoPlist.strings; sourceTree = "<group>"; };
		0BBBDE4F18506B61006A1BD1 /* finalUniByTemplateTests.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = finalUniByTemplateTests.m; sourceTree = "<group>"; };
		6BD4558B184CC1E000581686 /* liblib-outof-workspace.a */ = {isa = PBXFileReference; explicitFileType = archive.ar; includeInIndex = 0; path = "liblib-outof-workspace.a"; sourceTree = BUILT_PRODUCTS_DIR; };
		6BD4558E184CC1E000581686 /* Foundation.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = Foundation.framework; path = System/Library/Frameworks/Foundation.framework; sourceTree = SDKROOT; };
		6BD45592184CC1E000581686 /* lib-outof-workspace-Prefix.pch */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "lib-outof-workspace-Prefix.pch"; sourceTree = "<group>"; };
		6BD4559B184CC1E000581686 /* lib-outof-workspaceTests.xctest */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = "lib-outof-workspaceTests.xctest"; sourceTree = BUILT_PRODUCTS_DIR; };
		6BD4559C184CC1E000581686 /* XCTest.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = XCTest.framework; path = Library/Frameworks/XCTest.framework; sourceTree = DEVELOPER_DIR; };
		6BD455A6184CC1E000581686 /* lib-outof-workspaceTests-Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = "lib-outof-workspaceTests-Info.plist"; sourceTree = "<group>"; };
		6BD455A8184CC1E000581686 /* en */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = en; path = en.lproj/InfoPlist.strings; sourceTree = "<group>"; };
		6BD455AA184CC1E000581686 /* lib_outof_workspaceTests.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = lib_outof_workspaceTests.m; sourceTree = "<group>"; };
		6BD455B4184CC4BD00581686 /* say_hi.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = say_hi.h; sourceTree = "<group>"; };
		6BD455B5184CC4D300581686 /* say_hi.c */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.c; path = say_hi.c; sourceTree = "<group>"; };
		6BD455BC184CCBBD00581686 /* SayHi.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.cfbundle; includeInIndex = 0; path = SayHi.framework; sourceTree = BUILT_PRODUCTS_DIR; };
		6BD455BD184CCBBD00581686 /* CoreFoundation.framework */ = {isa = PBXFileReference; lastKnownFileType = wrapper.framework; name = CoreFoundation.framework; path = System/Library/Frameworks/CoreFoundation.framework; sourceTree = SDKROOT; };
		6BD455C1184CCBBD00581686 /* SayHi-Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = "SayHi-Info.plist"; sourceTree = "<group>"; };
		6BD455C3184CCBBD00581686 /* en */ = {isa = PBXFileReference; lastKnownFileType = text.plist.strings; name = en; path = en.lproj/InfoPlist.strings; sourceTree = "<group>"; };
		6BD455C5184CCBBD00581686 /* SayHi-Prefix.pch */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "SayHi-Prefix.pch"; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		0B2C873F184F6CFD0056A291 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				0B2C8750184F6D2C0056A291 /* liblib-outof-workspace.a in Frameworks */,
				0B2C8743184F6CFE0056A291 /* CoreFoundation.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		0BBBDE2D18506B61006A1BD1 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		0BBBDE3E18506B61006A1BD1 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				0BBBDE4218506B61006A1BD1 /* XCTest.framework in Frameworks */,
				0BBBDE4518506B61006A1BD1 /* UIKit.framework in Frameworks */,
				0BBBDE4318506B61006A1BD1 /* Foundation.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		6BD45588184CC1E000581686 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				6BD4558F184CC1E000581686 /* Foundation.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		6BD45598184CC1E000581686 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				6BD4559D184CC1E000581686 /* XCTest.framework in Frameworks */,
				6BD4559E184CC1E000581686 /* Foundation.framework in Frameworks */,
				6BD455A3184CC1E000581686 /* liblib-outof-workspace.a in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		6BD455B9184CCBBD00581686 /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
				6BD455BE184CCBBD00581686 /* CoreFoundation.framework in Frameworks */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		0B2C8744184F6CFE0056A291 /* uniSay */ = {
			isa = PBXGroup;
			children = (
				0B2C8745184F6CFE0056A291 /* Supporting Files */,
				0B2C875B184F703D0056A291 /* index.h */,
				0B2C875C184F703D0056A291 /* index.mm */,
			);
			path = uniSay;
			sourceTree = "<group>";
		};
		0B2C8745184F6CFE0056A291 /* Supporting Files */ = {
			isa = PBXGroup;
			children = (
				0B2C8746184F6CFE0056A291 /* uniSay-Info.plist */,
				0B2C8747184F6CFE0056A291 /* InfoPlist.strings */,
				0B2C874A184F6CFE0056A291 /* uniSay-Prefix.pch */,
			);
			name = "Supporting Files";
			sourceTree = "<group>";
		};
		0BBBDE3318506B61006A1BD1 /* finalUniByTemplate */ = {
			isa = PBXGroup;
			children = (
				0BBBDE3A18506B61006A1BD1 /* finalUniByTemplate.h */,
				0BBBDE3B18506B61006A1BD1 /* finalUniByTemplate.m */,
				0BBBDE3418506B61006A1BD1 /* Supporting Files */,
			);
			path = finalUniByTemplate;
			sourceTree = "<group>";
		};
		0BBBDE3418506B61006A1BD1 /* Supporting Files */ = {
			isa = PBXGroup;
			children = (
				0BBBDE3518506B61006A1BD1 /* finalUniByTemplate-Info.plist */,
				0BBBDE3618506B61006A1BD1 /* InfoPlist.strings */,
				0BBBDE3918506B61006A1BD1 /* finalUniByTemplate-Prefix.pch */,
			);
			name = "Supporting Files";
			sourceTree = "<group>";
		};
		0BBBDE4918506B61006A1BD1 /* finalUniByTemplateTests */ = {
			isa = PBXGroup;
			children = (
				0BBBDE4F18506B61006A1BD1 /* finalUniByTemplateTests.m */,
				0BBBDE4A18506B61006A1BD1 /* Supporting Files */,
			);
			path = finalUniByTemplateTests;
			sourceTree = "<group>";
		};
		0BBBDE4A18506B61006A1BD1 /* Supporting Files */ = {
			isa = PBXGroup;
			children = (
				0BBBDE4B18506B61006A1BD1 /* finalUniByTemplateTests-Info.plist */,
				0BBBDE4C18506B61006A1BD1 /* InfoPlist.strings */,
			);
			name = "Supporting Files";
			sourceTree = "<group>";
		};
		6BD45582184CC1E000581686 = {
			isa = PBXGroup;
			children = (
				0B27DF27185021E900C8B7F8 /* readme.txt */,
				6BD45590184CC1E000581686 /* lib-outof-workspace */,
				6BD455A4184CC1E000581686 /* lib-outof-workspaceTests */,
				6BD455BF184CCBBD00581686 /* SayHi */,
				0B2C8744184F6CFE0056A291 /* uniSay */,
				0BBBDE3318506B61006A1BD1 /* finalUniByTemplate */,
				0BBBDE4918506B61006A1BD1 /* finalUniByTemplateTests */,
				6BD4558D184CC1E000581686 /* Frameworks */,
				6BD4558C184CC1E000581686 /* Products */,
			);
			sourceTree = "<group>";
		};
		6BD4558C184CC1E000581686 /* Products */ = {
			isa = PBXGroup;
			children = (
				6BD4558B184CC1E000581686 /* liblib-outof-workspace.a */,
				6BD4559B184CC1E000581686 /* lib-outof-workspaceTests.xctest */,
				6BD455BC184CCBBD00581686 /* SayHi.framework */,
				0B2C8742184F6CFD0056A291 /* uniSay.framework */,
				0BBBDE3218506B61006A1BD1 /* finalUniByTemplate.framework */,
				0BBBDE4118506B61006A1BD1 /* finalUniByTemplateTests.xctest */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		6BD4558D184CC1E000581686 /* Frameworks */ = {
			isa = PBXGroup;
			children = (
				0B2C8712184F69E70056A291 /* liblib-outof-workspace.a */,
				6BD4558E184CC1E000581686 /* Foundation.framework */,
				6BD4559C184CC1E000581686 /* XCTest.framework */,
				6BD455BD184CCBBD00581686 /* CoreFoundation.framework */,
				0BBBDE4418506B61006A1BD1 /* UIKit.framework */,
			);
			name = Frameworks;
			sourceTree = "<group>";
		};
		6BD45590184CC1E000581686 /* lib-outof-workspace */ = {
			isa = PBXGroup;
			children = (
				6BD45591184CC1E000581686 /* Supporting Files */,
				6BD455B4184CC4BD00581686 /* say_hi.h */,
				6BD455B5184CC4D300581686 /* say_hi.c */,
			);
			path = "lib-outof-workspace";
			sourceTree = "<group>";
		};
		6BD45591184CC1E000581686 /* Supporting Files */ = {
			isa = PBXGroup;
			children = (
				6BD45592184CC1E000581686 /* lib-outof-workspace-Prefix.pch */,
			);
			name = "Supporting Files";
			sourceTree = "<group>";
		};
		6BD455A4184CC1E000581686 /* lib-outof-workspaceTests */ = {
			isa = PBXGroup;
			children = (
				6BD455AA184CC1E000581686 /* lib_outof_workspaceTests.m */,
				6BD455A5184CC1E000581686 /* Supporting Files */,
			);
			path = "lib-outof-workspaceTests";
			sourceTree = "<group>";
		};
		6BD455A5184CC1E000581686 /* Supporting Files */ = {
			isa = PBXGroup;
			children = (
				6BD455A6184CC1E000581686 /* lib-outof-workspaceTests-Info.plist */,
				6BD455A7184CC1E000581686 /* InfoPlist.strings */,
			);
			name = "Supporting Files";
			sourceTree = "<group>";
		};
		6BD455BF184CCBBD00581686 /* SayHi */ = {
			isa = PBXGroup;
			children = (
				6BD455C0184CCBBD00581686 /* Supporting Files */,
			);
			path = SayHi;
			sourceTree = "<group>";
		};
		6BD455C0184CCBBD00581686 /* Supporting Files */ = {
			isa = PBXGroup;
			children = (
				6BD455C1184CCBBD00581686 /* SayHi-Info.plist */,
				6BD455C2184CCBBD00581686 /* InfoPlist.strings */,
				6BD455C5184CCBBD00581686 /* SayHi-Prefix.pch */,
			);
			name = "Supporting Files";
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXHeadersBuildPhase section */
		0B2C8751184F6D340056A291 /* Headers */ = {
			isa = PBXHeadersBuildPhase;
			buildActionMask = 2147483647;
			files = (
				0B2C8752184F6D3A0056A291 /* say_hi.h in Headers */,
				0B2C875D184F703D0056A291 /* index.h in Headers */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		0BBBDE2E18506B61006A1BD1 /* Headers */ = {
			isa = PBXHeadersBuildPhase;
			buildActionMask = 2147483647;
			files = (
				0BBBDE5818506BA2006A1BD1 /* say_hi.h in Headers */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		6BD455CD184CDBE500581686 /* Headers */ = {
			isa = PBXHeadersBuildPhase;
			buildActionMask = 2147483647;
			files = (
				6BD455CE184CDBEE00581686 /* say_hi.h in Headers */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXHeadersBuildPhase section */

/* Begin PBXNativeTarget section */
		0B2C8741184F6CFD0056A291 /* uniSay */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 0B2C874B184F6CFE0056A291 /* Build configuration list for PBXNativeTarget "uniSay" */;
			buildPhases = (
				0B2C873E184F6CFD0056A291 /* Sources */,
				0B2C873F184F6CFD0056A291 /* Frameworks */,
				0B2C8740184F6CFD0056A291 /* Resources */,
				0B2C8751184F6D340056A291 /* Headers */,
			);
			buildRules = (
				0B2C875A184F6F4C0056A291 /* PBXBuildRule */,
			);
			dependencies = (
				0B2C874F184F6D120056A291 /* PBXTargetDependency */,
			);
			name = uniSay;
			productName = uniSay;
			productReference = 0B2C8742184F6CFD0056A291 /* uniSay.framework */;
			productType = "com.apple.product-type.bundle";
		};
		0BBBDE3118506B61006A1BD1 /* finalUniByTemplate */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 0BBBDE5518506B61006A1BD1 /* Build configuration list for PBXNativeTarget "finalUniByTemplate" */;
			buildPhases = (
				0BBBDE2C18506B61006A1BD1 /* Sources */,
				0BBBDE2D18506B61006A1BD1 /* Frameworks */,
				0BBBDE2E18506B61006A1BD1 /* Headers */,
				0BBBDE2F18506B61006A1BD1 /* Resources */,
				0BBBDE3018506B61006A1BD1 /* ShellScript */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = finalUniByTemplate;
			productName = finalUniByTemplate;
			productReference = 0BBBDE3218506B61006A1BD1 /* finalUniByTemplate.framework */;
			productType = "com.apple.product-type.bundle";
		};
		0BBBDE4018506B61006A1BD1 /* finalUniByTemplateTests */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 0BBBDE5618506B61006A1BD1 /* Build configuration list for PBXNativeTarget "finalUniByTemplateTests" */;
			buildPhases = (
				0BBBDE3D18506B61006A1BD1 /* Sources */,
				0BBBDE3E18506B61006A1BD1 /* Frameworks */,
				0BBBDE3F18506B61006A1BD1 /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
				0BBBDE4718506B61006A1BD1 /* PBXTargetDependency */,
			);
			name = finalUniByTemplateTests;
			productName = finalUniByTemplateTests;
			productReference = 0BBBDE4118506B61006A1BD1 /* finalUniByTemplateTests.xctest */;
			productType = "com.apple.product-type.bundle.unit-test";
		};
		6BD4558A184CC1E000581686 /* lib-outof-workspace */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 6BD455AE184CC1E000581686 /* Build configuration list for PBXNativeTarget "lib-outof-workspace" */;
			buildPhases = (
				6BD45587184CC1E000581686 /* Sources */,
				6BD45588184CC1E000581686 /* Frameworks */,
				6BD45589184CC1E000581686 /* CopyFiles */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = "lib-outof-workspace";
			productName = "lib-outof-workspace";
			productReference = 6BD4558B184CC1E000581686 /* liblib-outof-workspace.a */;
			productType = "com.apple.product-type.library.static";
		};
		6BD4559A184CC1E000581686 /* lib-outof-workspaceTests */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 6BD455B1184CC1E000581686 /* Build configuration list for PBXNativeTarget "lib-outof-workspaceTests" */;
			buildPhases = (
				6BD45597184CC1E000581686 /* Sources */,
				6BD45598184CC1E000581686 /* Frameworks */,
				6BD45599184CC1E000581686 /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
				6BD455A2184CC1E000581686 /* PBXTargetDependency */,
			);
			name = "lib-outof-workspaceTests";
			productName = "lib-outof-workspaceTests";
			productReference = 6BD4559B184CC1E000581686 /* lib-outof-workspaceTests.xctest */;
			productType = "com.apple.product-type.bundle.unit-test";
		};
		6BD455BB184CCBBD00581686 /* SayHi */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = 6BD455C6184CCBBD00581686 /* Build configuration list for PBXNativeTarget "SayHi" */;
			buildPhases = (
				6BD455B8184CCBBD00581686 /* Sources */,
				6BD455B9184CCBBD00581686 /* Frameworks */,
				6BD455BA184CCBBD00581686 /* Resources */,
				6BD455CD184CDBE500581686 /* Headers */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = SayHi;
			productName = SayHi;
			productReference = 6BD455BC184CCBBD00581686 /* SayHi.framework */;
			productType = "com.apple.product-type.bundle";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		6BD45583184CC1E000581686 /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastUpgradeCheck = 0500;
				ORGANIZATIONNAME = erikge;
				TargetAttributes = {
					0BBBDE4018506B61006A1BD1 = {
						TestTargetID = 6BD455BB184CCBBD00581686;
					};
					6BD4559A184CC1E000581686 = {
						TestTargetID = 6BD455BB184CCBBD00581686;
					};
				};
			};
			buildConfigurationList = 6BD45586184CC1E000581686 /* Build configuration list for PBXProject "lib-outof-workspace" */;
			compatibilityVersion = "Xcode 3.2";
			developmentRegion = English;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
			);
			mainGroup = 6BD45582184CC1E000581686;
			productRefGroup = 6BD4558C184CC1E000581686 /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				6BD4558A184CC1E000581686 /* lib-outof-workspace */,
				6BD4559A184CC1E000581686 /* lib-outof-workspaceTests */,
				6BD455BB184CCBBD00581686 /* SayHi */,
				0B0F938D184F64FC00A0874A /* merge2libs */,
				0B2C8741184F6CFD0056A291 /* uniSay */,
				0B27DF281850254D00C8B7F8 /* finalUni */,
				0BBBDE3118506B61006A1BD1 /* finalUniByTemplate */,
				0BBBDE4018506B61006A1BD1 /* finalUniByTemplateTests */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		0B2C8740184F6CFD0056A291 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				0B2C8749184F6CFE0056A291 /* InfoPlist.strings in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		0BBBDE2F18506B61006A1BD1 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				0BBBDE3818506B61006A1BD1 /* InfoPlist.strings in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		0BBBDE3F18506B61006A1BD1 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				0BBBDE4818506B61006A1BD1 /* finalUniByTemplate.framework in Resources */,
				0BBBDE4E18506B61006A1BD1 /* InfoPlist.strings in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		6BD45599184CC1E000581686 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				6BD455A9184CC1E000581686 /* InfoPlist.strings in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		6BD455BA184CCBBD00581686 /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				6BD455C4184CCBBD00581686 /* InfoPlist.strings in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXShellScriptBuildPhase section */
		0B0F9391184F650B00A0874A /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "# define output folder environment variable\nUNIVERSAL_OUTPUTFOLDER=${BUILD_DIR}/${CONFIGURATION}-universal\n\n# Step 1. Build Device and Simulator versions\nxcodebuild -target lib-outof-workspace ONLY_ACTIVE_ARCH=NO -configuration ${CONFIGURATION} -sdk iphoneos  BUILD_DIR=\"${BUILD_DIR}\" BUILD_ROOT=\"${BUILD_ROOT}\"\nxcodebuild -target lib-outof-workspace -configuration ${CONFIGURATION} -sdk iphonesimulator -arch i386 BUILD_DIR=\"${BUILD_DIR}\" BUILD_ROOT=\"${BUILD_ROOT}\"\n\n# make sure the output directory exists\nmkdir -p \"${UNIVERSAL_OUTPUTFOLDER}\"\n\n# Step 2. Create universal binary file using lipo\nlipo -create -output \"${UNIVERSAL_OUTPUTFOLDER}/lib${PROJECT_NAME}.a\" \"${BUILD_DIR}/${CONFIGURATION}-iphoneos/lib${PROJECT_NAME}.a\" \"${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/lib${PROJECT_NAME}.a\"\n\n# Last touch. copy the header files. Just for convenience\n# cp -R \"${BUILD_DIR}/${CONFIGURATION}-iphoneos/include\" \"${UNIVERSAL_OUTPUTFOLDER}/\"";
		};
		0B27DF2C1850257E00C8B7F8 /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "xcodebuild -project ${PROJECT_NAME}.xcodeproj -sdk iphonesimulator -target ${PROJECT_NAME} -configuration ${CONFIGURATION} clean build CONFIGURATION_BUILD_DIR=${BUILD_DIR}/${CONFIGURATION}-iphonesimulator\n\nxcodebuild -project ${PROJECT_NAME}.xcodeproj -sdk iphoneos -target ${PROJECT_NAME} -configuration ${CONFIGURATION} clean build CONFIGURATION_BUILD_DIR=${BUILD_DIR}/${CONFIGURATION}-iphoneos";
			showEnvVarsInLog = 0;
		};
		0B27DF2D185025E400C8B7F8 /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /bin/sh;
			shellScript = "SIMULATOR_LIBRARY_PATH=\"${BUILD_DIR}/${CONFIGURATION}-iphonesimulator/lib${PROJECT_NAME}.a\"\nDEVICE_LIBRARY_PATH=\"${BUILD_DIR}/${CONFIGURATION}-iphoneos/lib${PROJECT_NAME}.a\"\nUNIVERSAL_LIBRARY_DIR=\"${BUILD_DIR}/${CONFIGURATION}-iphoneuniversal\"\nUNIVERSAL_LIBRARY_PATH=\"${UNIVERSAL_LIBRARY_DIR}/${PRODUCT_NAME}\"\nFRAMEWORK=\"${UNIVERSAL_LIBRARY_DIR}/${PRODUCT_NAME}.framework\"\n\n# Create framework directory structure.\nrm -rf \"${FRAMEWORK}\"\nmkdir -p \"${UNIVERSAL_LIBRARY_DIR}\"\nmkdir -p \"${FRAMEWORK}/Versions/A/Headers\"\nmkdir -p \"${FRAMEWORK}/Versions/A/Resources\"\n\n# Generate universal binary for the device and simulator.\nlipo \"${SIMULATOR_LIBRARY_PATH}\" \"${DEVICE_LIBRARY_PATH}\" -create -output \"${UNIVERSAL_LIBRARY_PATH}\"\n\n# Move files to appropriate locations in framework paths.\ncp \"${UNIVERSAL_LIBRARY_PATH}\" \"${FRAMEWORK}/Versions/A\"\nln -s \"A\" \"${FRAMEWORK}/Versions/Current\"\nln -s \"Versions/Current/Headers\" \"${FRAMEWORK}/Headers\"\nln -s \"Versions/Current/Resources\" \"${FRAMEWORK}/Resources\"\nln -s \"Versions/Current/${PRODUCT_NAME}\" \"${FRAMEWORK}/${PRODUCT_NAME}\"";
			showEnvVarsInLog = 0;
		};
		0BBBDE3018506B61006A1BD1 /* ShellScript */ = {
			isa = PBXShellScriptBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			inputPaths = (
			);
			outputPaths = (
			);
			runOnlyForDeploymentPostprocessing = 0;
			shellPath = /usr/bin/python;
			shellScript = "# TAG: BUILD SCRIPT (do not remove this comment)\n# Build script generated using https://github.com/kstenerud/iOS-Universal-Framework Mk 8 (beta 2012-06-16)\nimport logging\n\n\n##############################################################################\n#\n# Configuration\n#\n##############################################################################\n\n# Select which kind of framework to build.\n#\n# Note: Due to issues with Xcode's build process, if you select\n#       'embeddedframework', it will still show the regular framework\n#       (as a symlink) along side of the embedded framework. Be sure to\n#       instruct your users to copy/move the embedded framework in this case!\n#\n# If your framework contains resources such as images, nibs, momds, plists,\n# zipfiles and such, choose 'embeddedframework'.\n#\n# If your framework contains no resources, choose 'framework'.\n#\nconfig_framework_type = 'framework'\n#config_framework_type = 'embeddedframework'\n\n# Open the build directory in Finder when the universal framework is\n# successfully built.\n#\n# This value can be overridden by setting the UFW_OPEN_BUILD_DIR env variable\n# to True or False.\n#\n# Recommended setting: True\n#\nconfig_open_build_dir = True\n\n# If true, ensures that all public headers are stored in the framework under\n# the same directory hierarchy as they were in the source tree.\n#\n# Xcode by default places all headers at the same top level, but every other\n# build tool in the known universe preserves directory structure. For simple\n# libraries it doesn't really matter much, but for ports of existing software\n# packages or for bigger libraries, it makes sense to have more structure.\n#\n# The default is set to \"False\" since that's what most Xcode users are used to.\n#\n# Recommended setting: True for deep hierarchy projects, False otherwise.\n#\nconfig_deep_header_hierarchy = False\n\n# Specify where the top of the public header hierarchy is. This path is\n# relative to the project's dir (PROJECT_DIR). You can reference environment\n# variables using templating syntax (e.g. \"${TARGET_NAME}/Some/Subdir\")\n#\n# NOTE: Only used if config_deep_header_hierarchy is True.\n#\n# If this is set to None, the script will attempt to figure out for itself\n# where the top of the header hierarchy is by looking for common path prefixes\n# in the public header files. This process can fail if:\n# - You only have one public header file.\n# - Your source header files don't all have a common root.\n#\n# A common approach is to use \"${TARGET_NAME}\", working under the assumption\n# that all of your header files share the common root of a directory under\n# your project with the same name as your target (which is the Xcode default).\n#\n# Recommended setting: \"${TARGET_NAME}\"\n#\nconfig_deep_header_top = \"${TARGET_NAME}\"\n\n# Warn when \"DerivedData\" is detected in any of the header, library, or\n# framework search paths. In almost all cases, references to directories under\n# DerivedData are added as a result of an Xcode bug and must be manually\n# removed.\n#\n# Recommended setting: True\n#\nconfig_warn_derived_data = True\n\n# Warn if no headers were marked public in this framework.\n#\n# Recommended setting: True\n#\nconfig_warn_no_public_headers = True\n\n# Cause the build to fail if any warnings are issued.\n#\n# Recommended setting: True\n#\nconfig_fail_on_warnings = True\n\n# Minimum log level\n#\n# Recommended setting: logging.INFO\n#\nconfig_log_level = logging.INFO\n\n\n##############################################################################\n#\n# Don't touch anything below here unless you know what you're doing.\n#\n##############################################################################\n\nimport collections\nimport json\nimport os\nimport re\nimport shlex\nimport shutil\nimport string\nimport subprocess\nimport sys\nimport time\nimport traceback\n\n\n##############################################################################\n#\n# Globals\n#\n##############################################################################\n\nlog = logging.getLogger('UFW')\n\nissued_warnings = False\n\n\n##############################################################################\n#\n# Classes\n#\n##############################################################################\n\n# Allows the slave build to communicate with the master build.\n#\nclass BuildState:\n\n    def __init__(self):\n        self.reload()\n\n    def reset(self):\n        self.slave_platform = None\n        self.slave_architectures = []\n        self.slave_linked_archive_paths = []\n        self.slave_built_fw_path = None\n        self.slave_built_embedded_fw_path = None\n\n    def set_slave_properties(self, architectures,\n                             linked_archive_paths,\n                             built_fw_path,\n                             built_embedded_fw_path):\n        self.slave_platform = os.environ['PLATFORM_NAME']\n        self.slave_architectures = architectures\n        self.slave_linked_archive_paths = linked_archive_paths\n        self.slave_built_fw_path = built_fw_path\n        self.slave_built_embedded_fw_path = built_embedded_fw_path\n\n    def get_save_path(self):\n        return os.path.join(os.environ['PROJECT_TEMP_DIR'], \"ufw_build_state.json\")\n\n    def persist(self):\n        filename = self.get_save_path()\n        parent = os.path.dirname(filename)\n        if not os.path.isdir(parent):\n            os.makedirs(parent)\n        with open(filename, \"w\") as f:\n            f.write(json.dumps(self.__dict__))\n\n    def reload(self):\n        self.reset()\n        filename = self.get_save_path()\n        if os.path.exists(filename):\n            with open(filename, \"r\") as f:\n                new_dict = json.loads(f.read())\n                if new_dict is not None:\n                    self.__dict__ = dict(self.__dict__.items() + new_dict.items())\n\n\n# Holds information about the current project and build environment.\n#\nclass Project:\n\n    def __init__(self, filename):\n        sourcecode_types = ['sourcecode.c.c',\n                            'sourcecode.c.objc',\n                            'sourcecode.cpp.cpp',\n                            'sourcecode.cpp.objcpp',\n                            'sourcecode.asm.asm',\n                            'sourcecode.asm.llvm',\n                            'sourcecode.nasm']\n\n        self.build_state = BuildState()\n        self.project_data = self.load_from_file(filename)\n        self.target = filter(lambda x: x['name'] == os.environ['TARGET_NAME'], self.project_data['targets'])[0]\n        self.public_headers = self.get_build_phase_files('PBXHeadersBuildPhase', lambda x: x.get('settings', False) and x['settings'].get('ATTRIBUTES', False) and 'Public' in x['settings']['ATTRIBUTES'])\n        self.static_libraries = self.get_build_phase_files('PBXFrameworksBuildPhase', lambda x: x['fileRef']['fileType'] == 'archive.ar' and x['fileRef']['sourceTree'] not in ['DEVELOPER_DIR', 'SDKROOT'])\n        self.static_frameworks = self.get_build_phase_files('PBXFrameworksBuildPhase', lambda x: x['fileRef']['fileType'] == 'wrapper.framework' and x['fileRef']['sourceTree'] not in ['DEVELOPER_DIR', 'SDKROOT'])\n        self.compilable_sources = self.get_build_phase_files('PBXSourcesBuildPhase', lambda x: x['fileRef']['fileType'] in sourcecode_types)\n        self.header_paths = [os.path.join(*x['pathComponents']) for x in self.public_headers]\n\n        self.headers_dir = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['CONTENTS_FOLDER_PATH'], 'Headers')\n        self.libtool_path = os.path.join(os.environ['DT_TOOLCHAIN_DIR'], 'usr', 'bin', 'libtool')\n        self.project_filename = os.path.join(os.environ['PROJECT_FILE_PATH'], \"project.pbxproj\")\n        self.local_exe_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])\n        self.local_architectures = os.environ['ARCHS'].split(' ')\n        self.local_built_fw_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['WRAPPER_NAME'])\n        self.local_built_embedded_fw_path = os.path.splitext(self.local_built_fw_path)[0] + \".embeddedframework\"\n        self.local_linked_archive_paths = [self.get_linked_ufw_archive_path(arch) for arch in self.local_architectures]\n        self.local_platform = os.environ['PLATFORM_NAME']\n        other_platforms = os.environ['SUPPORTED_PLATFORMS'].split(' ')\n        other_platforms.remove(self.local_platform)\n        self.other_platform = other_platforms[0]\n\n        sdk_name = os.environ['SDK_NAME']\n        if not sdk_name.startswith(self.local_platform):\n            raise Exception(\"%s didn't start with %s\" % (sdk_name, self.local_platform))\n        self.sdk_version = sdk_name[len(self.local_platform):]\n\n    # Load an Xcode project file.\n    #\n    def load_from_file(self, filename):\n        project_file = json.loads(subprocess.check_output([\"plutil\", \"-convert\", \"json\", \"-o\", \"-\", filename]))\n        all_objects = project_file['objects']\n        del project_file['objects']\n        for obj in all_objects.values():\n            self.fix_keys(obj)\n        self.unpack_objects(self.build_dereference_list(all_objects, None, None, project_file))\n        self.unpack_objects(self.build_dereference_list(all_objects, None, None, all_objects.values()))\n        project_data = project_file['rootObject']\n        self.build_full_paths(project_data, splitpath(os.environ['SOURCE_ROOT']))\n        return project_data\n\n    def is_key(self, obj):        \n        return isinstance(obj, basestring) and len(obj) == 24 and re.search('^[0-9a-fA-F]+$', obj) is not None\n    \n    def build_dereference_list(self, all_objects, parent, key, obj):\n        deref_list = []\n        if self.is_key(obj):\n            dereferenced = all_objects.get(obj, obj)\n            if dereferenced is not obj:\n                deref_list.append((parent, key, obj, dereferenced))\n        elif isinstance(obj, collections.Mapping):\n            for k, v in obj.iteritems():\n                deref_list += self.build_dereference_list(all_objects, obj, k, v)\n        elif isinstance(obj, collections.Iterable) and not isinstance(obj, basestring):\n            for item in obj:\n                deref_list += self.build_dereference_list(all_objects, obj, None, item)\n        return deref_list\n    \n    def unpack_objects(self, deref_list):\n        for parent, key, orig, obj in deref_list:\n            if key is None:\n                parent.remove(orig)\n                parent.append(obj)\n            else:\n                parent[key] = obj\n\n    # Store the full path, separated into components, to a node inside the node\n    # as \"pathComponents\". Also recurse into that node if it's a group.\n    #\n    def build_full_paths(self, node, base_path):\n        # Some nodes are relative to a different source tree, specified as an\n        # env variable.\n        if node.get('sourceTree', '<group>') != '<group>':\n            new_base_path = os.environ.get(node['sourceTree'], None)\n            if new_base_path:\n                base_path = splitpath(new_base_path)\n        # Add the current node's path, if any.\n        if node.get('path', False):\n            base_path = base_path + splitpath(node['path'])\n        node['pathComponents'] = base_path\n        # Recurse if this is a group.\n        if node['isa'] == 'PBXGroup':\n            for child in node['children']:\n                self.build_full_paths(child, base_path)\n        elif node['isa'] == 'PBXProject':\n            self.build_full_paths(node['mainGroup'], base_path)\n            self.build_full_paths(node['productRefGroup'], base_path)\n            for child in node['targets']:\n                self.build_full_paths(child, base_path)\n            projectRefs = node.get('projectReferences', None)\n            if projectRefs is not None:\n                for child in projectRefs[0].values():\n                    self.build_full_paths(child, base_path)\n\n    # Fix up any inconvenient keys.\n    #\n    def fix_keys(self, obj):\n        key_remappings = {'lastKnownFileType': 'fileType', 'explicitFileType': 'fileType'}\n        for key in list(set(key_remappings.keys()) & set(obj.keys())):\n            obj[key_remappings[key]] = obj[key]\n            del obj[key]\n\n    # Get the files from a build phase.\n    #\n    def get_build_phase_files(self, build_phase_name, filter_func):\n        build_phase = filter(lambda x: x['isa'] == build_phase_name, self.target['buildPhases'])[0]\n        build_files = filter(filter_func, build_phase['files'])\n        return [x['fileRef'] for x in build_files]\n\n    # Get the truncated paths of all headers that start with the specified\n    # relative path. Paths are read and returned as fully separated lists.\n    # e.g. ['Some', 'Path', 'To', 'A', 'Header'] with relative_path of\n    # ['Some', 'Path'] gets truncated to ['To', 'A', 'Header']\n    #\n    def movable_headers_relative_to(self, relative_path):\n        rel_path_length = len(relative_path)\n        result = filter(lambda path: len(path) >= rel_path_length and\n                                     path[:rel_path_length] == relative_path, self.header_paths)\n        return [path[rel_path_length:] for path in result]\n\n    # Get the full path to where a linkable archive (library or framework)\n    # is supposed to be.\n    #\n    def get_linked_archive_path(self, architecture):\n        return os.path.join(os.environ['OBJECT_FILE_DIR_%s' % os.environ['CURRENT_VARIANT']],\n                            architecture,\n                            os.environ['EXECUTABLE_NAME'])\n\n    # Get the full path to our custom linked archive of the project.\n    #\n    def get_linked_ufw_archive_path(self, architecture):\n        return self.get_linked_archive_path(architecture) + \".ufwbuild\"\n\n    # Get the full path to the executable of an archive.\n    #\n    def get_exe_path(self, node):\n        path = os.path.join(*node['pathComponents'])\n        if node['fileType'] == 'wrapper.framework':\n            # Frameworks are directories, so go one deeper\n            path = os.path.join(path, os.path.splitext(node['pathComponents'][-1])[0])\n        return path\n\n    # Get the path to the directory containing the archive.\n    #\n    def get_containing_path(self, node):\n        return os.path.join(*node['pathComponents'])\n    \n    def get_archive_search_paths(self):\n        log.info(\"Search paths = %s\" % set([self.get_containing_path(fw) for fw in self.static_frameworks] + [self.get_containing_path(fw) for fw in self.static_libraries]))\n        return set([self.get_containing_path(fw) for fw in self.static_frameworks] + [self.get_containing_path(fw) for fw in self.static_libraries])\n\n    # Command to link all objects of a single architecture.\n    #\n    def get_single_arch_link_command(self, architecture):\n        cmd = [self.libtool_path,\n               \"-static\",\n               \"-arch_only\", architecture,\n               \"-syslibroot\", os.environ['SDKROOT'],\n               \"-L%s\" % os.environ['TARGET_BUILD_DIR'],\n               \"-filelist\", os.environ['LINK_FILE_LIST_%s_%s' % (os.environ['CURRENT_VARIANT'], architecture)]]\n        if os.environ.get('OTHER_LDFLAGS', False):\n            cmd += [os.environ['OTHER_LDFLAGS']]\n        if os.environ.get('WARNING_LDFLAGS', False):\n            cmd += [os.environ['WARNING_LDFLAGS']]\n#        cmd += [\"-L%s\" % libpath for libpath in self.get_archive_search_paths()]\n        cmd += [self.get_exe_path(fw) for fw in self.static_frameworks]\n        cmd += [self.get_exe_path(lib) for lib in self.static_libraries]\n        cmd += [\"-o\", self.get_linked_ufw_archive_path(architecture)]\n        return cmd\n\n    # Command to link all local architectures for the current configuration\n    # into an archive. This reads all libraries + the UFW-built archives and\n    # overwrites the final product.\n    #\n    def get_local_archs_link_command(self):\n        cmd = [self.libtool_path,\n               \"-static\"]\n        cmd += self.local_linked_archive_paths\n        cmd += [self.get_exe_path(fw) for fw in self.static_frameworks]\n        cmd += [self.get_exe_path(lib) for lib in self.static_libraries]\n        cmd += [\"-o\", os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])]\n        return cmd\n\n    # Command to link all architectures into a universal archive.\n    # This reads all UFW-built archives and overwrites the final product.\n    #\n    def get_all_archs_link_command(self):\n        cmd = [self.libtool_path,\n               \"-static\"]\n        cmd += self.local_linked_archive_paths + self.build_state.slave_linked_archive_paths\n        cmd += [\"-o\", os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['EXECUTABLE_PATH'])]\n        return cmd\n\n    # Build up an environment for the slave process. This uses BUILD_ROOT\n    # and TEMP_ROOT to convert all environment variables to values suitable\n    # for the slave build environment so that xcodebuild doesn't try to build\n    # in the project directory under \"build\".\n    #\n    def get_slave_environment(self):\n        ignored = ['LD_MAP_FILE_PATH',\n        'HEADER_SEARCH_PATHS',\n        'LIBRARY_SEARCH_PATHS',\n        'FRAMEWORK_SEARCH_PATHS']\n        build_root = os.environ['BUILD_ROOT']\n        temp_root = os.environ['TEMP_ROOT']\n        newenv = {}\n        for key, value in os.environ.items():\n            if key not in ignored and not key.startswith('LINK_FILE_LIST_') and not key.startswith('LD_DEPENDENCY_'):\n                if build_root in value or temp_root in value:\n                    newenv[key] = value.replace(self.local_platform, self.other_platform)\n        return newenv\n\n    # Command to invoke xcodebuild on the slave platform.\n    #\n    def get_slave_project_build_command(self):\n        cmd = [\"xcodebuild\",\n               \"-project\",\n               os.environ['PROJECT_FILE_PATH'],\n               \"-target\",\n               os.environ['TARGET_NAME'],\n               \"-configuration\",\n               os.environ['CONFIGURATION'],\n               \"-sdk\",\n               self.other_platform + self.sdk_version]\n        cmd += [\"%s=%s\" % (key, value) for key, value in self.get_slave_environment().items()]\n        cmd += [\"UFW_MASTER_PLATFORM=\" + os.environ['PLATFORM_NAME']]\n        cmd += [os.environ['ACTION']]\n        return cmd\n\n\n\n##############################################################################\n#\n# Utility Functions\n#\n##############################################################################\n\n# Split a path into a list of path components.\n#\ndef splitpath(path, maxdepth=20):\n     (head, tail) = os.path.split(path)\n     return splitpath(head, maxdepth - 1) + [tail] if maxdepth and head and head != path else [ head or tail ]\n\n# Remove all subdirectories under a path.\n#\ndef remove_subdirs(path, ignore_files):\n    if os.path.exists(path):\n        for filename in filter(lambda x: x not in ignore_files, os.listdir(path)):\n            fullpath = os.path.join(path, filename)\n            if os.path.isdir(fullpath):\n                log.info(\"Remove %s\" % fullpath)\n                shutil.rmtree(fullpath)\n\n# Make whatever parent paths are necessary for a path to exist.\n#\ndef ensure_path_exists(path):\n    if not os.path.isdir(path):\n        os.makedirs(path)\n\n# Make whatever parent paths are necessary for a path's parent to exist.\n#\ndef ensure_parent_exists(path):\n    parent = os.path.dirname(path)\n    if not os.path.isdir(parent):\n        os.makedirs(parent)\n\n# Remove a file or dir if it exists.\n#\ndef remove_path(path):\n    if os.path.exists(path):\n        if os.path.isdir(path) and not os.path.islink(path):\n            shutil.rmtree(path)\n        else:\n            os.remove(path)\n\n# Move a file or dir, replacing the destination if it exists.\n#\ndef move_file(src, dst):\n    if src == dst or not os.path.isfile(src):\n        return\n    log.info(\"Move %s to %s\" % (src, dst))\n    ensure_parent_exists(dst)\n    remove_path(dst)\n    shutil.move(src, dst)\n\n# Copy a file or dir, replacing the destination if it exists already.\n#\ndef copy_overwrite(src, dst):\n    if src != dst:\n        remove_path(dst)\n        ensure_parent_exists(dst)\n        shutil.copytree(src, dst, symlinks=True)\n\n# Attempt to symlink link_path -> link_to.\n# link_to must be a path relative to link_path's parent and must exist.\n# If link_path already exists, do nothing.\n#\ndef attempt_symlink(link_path, link_to):\n    # Only allow linking to an existing file\n    os.stat(os.path.abspath(os.path.join(link_path, \"..\", link_to)))\n\n    # Only make the link if it hasn't already been made\n    if not os.path.exists(link_path):\n        log.info(\"Symlink %s -> %s\" % (link_path, link_to))\n        os.symlink(link_to, link_path)\n\n# Takes the last entry in an array-based path and returns a normal path\n# relative to base_path.\n#\ndef top_level_file_path(base_path, path_list):\n    return os.path.join(base_path, os.path.split(path_list[-1])[-1])\n\n# Takes all entries in an array-based path and returns a normal path\n# relative to base_path.\n#\ndef full_file_path(base_path, path_list):\n    return os.path.join(*([base_path] + path_list))\n\n# Print a command before executing it.\n# Also print out all output from the command to STDOUT.\n#\ndef print_and_call(cmd):\n    log.info(\"Cmd \" + \" \".join(cmd))\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    result = p.communicate()[0]\n    if len(result) > 0:\n        log.info(result)\n    if p.returncode != 0:\n        raise subprocess.CalledProcessError(p.returncode, cmd)\n\n# Special print-and-call command for the slave build that strips out\n# xcodebuild's spammy list of environment variables.\n#\ndef print_and_call_slave_build(cmd, other_platform):\n    separator = '=== BUILD NATIVE TARGET '\n    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)\n    result = p.communicate()[0].split(separator)\n    if len(result) == 1:\n        result = result[0]\n    else:\n        result = separator + result[1]\n    log.info(\"Cmd \" + \" \".join(cmd) + \"\\n\" + result)\n    if p.returncode != 0:\n        raise subprocess.CalledProcessError(p.returncode, cmd)\n\n# Issue a warning and record that a warning has been issued.\n#\ndef issue_warning(msg, *args, **kwargs):\n    global issued_warnings\n    issued_warnings = True\n    log.warn(msg, *args, **kwargs)\n\n\n\n##############################################################################\n#\n# Main Application\n#\n##############################################################################\n\n# Check if we are running as master.\n#\ndef is_master():\n    return os.environ.get('UFW_MASTER_PLATFORM', os.environ['PLATFORM_NAME']) == os.environ['PLATFORM_NAME']\n\n# DerivedData should almost never appear in any framework, library, or header\n# search paths. However, Xcode will sometimes add them in, so we check to make\n# sure.\n#\ndef check_for_derived_data_in_search_paths(project):\n    search_path_keys = [\"FRAMEWORK_SEARCH_PATHS\", \"LIBRARY_SEARCH_PATHS\", \"HEADER_SEARCH_PATHS\"]\n    build_configs = project.target['buildConfigurationList']['buildConfigurations']\n    build_settings = filter(lambda x: x['name'] == os.environ['CONFIGURATION'], build_configs)[0]['buildSettings']\n    \n    found_something = False\n    for path_key in filter(lambda x: x in build_settings, search_path_keys):\n        path = build_settings[path_key]\n        if \"DerivedData\" in path:\n            found_something = True\n            log.warn(\"Derived data in %s\" % path)\n            issue_warning(\"'%s' contains reference to 'DerivedData'.\" % path_key)\n    if found_something:\n        log.warn(\"Check your build settings and remove any entries that contain paths inside the DerivedData folder.\")\n        log.warn(\"Otherwise you can disable this warning by changing 'config_warn_derived_data' in this script.\")\n\n# Link local architectures into their respective archives.\n#\ndef link_local_archs(project):\n    for arch in project.local_architectures:\n        print_and_call(project.get_single_arch_link_command(arch))\n\n# Link only the local architectures into the final product, not the slave\n# architectures. For iphoneos, this will be armv6, armv7. For simulator, this\n# will be i386.\n#\ndef link_combine_local_archs(project):\n    print_and_call(project.get_local_archs_link_command())\n\n# Link all architectures into the final product.\n#\ndef link_combine_all_archs(project):\n    print_and_call(project.get_all_archs_link_command())\n\n# Check if we should open the build directory after a successful build.\n#\ndef should_open_build_dir():\n    env_setting = os.environ.get('UFW_OPEN_BUILD_DIR', None)\n    if env_setting is not None:\n        return env_setting\n\n    return config_open_build_dir\n\n# Open the build dir in Finder.\n#\ndef open_build_dir():\n    print_and_call(['open', os.environ['TARGET_BUILD_DIR']])\n\n# Check if the build was started by selecting \"Archive\" under \"Product\" in\n# Xcode.\n#\ndef is_archive_build():\n    # ACTION is always 'build', but perhaps Apple will fix this someday?\n    archive_build = os.environ['ACTION'] == 'archive'\n\n    if not archive_build:\n        # This can be passed in as an env variable when building from command line.\n        archive_build = os.environ.get('UFW_ACTION', None) == 'archive'\n\n    build_dir = splitpath(os.environ['BUILD_DIR'])\n    if not archive_build:\n        # This partial path is used when you select \"archive\" from within Xcode.\n        archive_build = 'ArchiveIntermediates' in build_dir\n\n    # It only counts as a full archive build if this target is being built into\n    # its own build dir (not being built as a dependency of another target)\n    if archive_build:\n        archive_build = os.environ['TARGET_NAME'] in build_dir\n    \n    return archive_build\n\n# Xcode by default throws all public headers into the top level directory.\n# This function moves them to their expected deep hierarchy.\n#\ndef build_deep_header_hierarchy(project):\n    header_path_top = config_deep_header_top\n    if not header_path_top:\n        header_path_top = os.path.commonprefix(project.header_paths)\n    else:\n        header_path_top = splitpath(header_path_top)\n\n    built_headers_path = os.path.join(os.environ['TARGET_BUILD_DIR'], os.environ['PUBLIC_HEADERS_FOLDER_PATH'])\n    movable_headers = project.movable_headers_relative_to(header_path_top)\n\n    # Remove subdirs if they only contain files that have been rebuilt\n    ignore_headers = filter(lambda x: not os.path.isfile(top_level_file_path(built_headers_path, x)), movable_headers)\n    remove_subdirs(built_headers_path, [file[0] for file in ignore_headers])\n\n    # Move rebuilt headers into their proper subdirs\n    for header in movable_headers:\n        move_file(top_level_file_path(built_headers_path, header), full_file_path(built_headers_path, header))\n\n# Add all symlinks needed to make a full framework structure:\n#\n# MyFramework.framework\n# |-- MyFramework -> Versions/Current/MyFramework\n# |-- Headers -> Versions/Current/Headers\n# |-- Resources -> Versions/Current/Resources\n# `-- Versions\n#     |-- A\n#     |   |-- MyFramework\n#     |   |-- Headers\n#     |   |   `-- MyFramework.h\n#     |   `-- Resources\n#     |       |-- Info.plist\n#     |       |-- MyViewController.nib\n#     |       `-- en.lproj\n#     |           `-- InfoPlist.strings\n#     `-- Current -> A\n#\ndef add_symlinks_to_framework(project):\n    base_dir = project.local_built_fw_path\n    attempt_symlink(os.path.join(base_dir, \"Versions\", \"Current\"), os.environ['FRAMEWORK_VERSION'])\n    if os.path.isdir(os.path.join(base_dir, \"Versions\", \"Current\", \"Headers\")):\n        attempt_symlink(os.path.join(base_dir, \"Headers\"), os.path.join(\"Versions\", \"Current\", \"Headers\"))\n    if os.path.isdir(os.path.join(base_dir, \"Versions\", \"Current\", \"Resources\")):\n        attempt_symlink(os.path.join(base_dir, \"Resources\"), os.path.join(\"Versions\", \"Current\", \"Resources\"))\n    attempt_symlink(os.path.join(base_dir, os.environ['EXECUTABLE_NAME']), os.path.join(\"Versions\", \"Current\", os.environ['EXECUTABLE_NAME']))\n\n# Build an embedded framework structure.\n# An embedded framework contains the actual framework, plus a \"Resources\"\n# directory containing symlinks to all resources found in the actual framework,\n# with the exception of \"Info.plist\" and anything ending in \".lproj\":\n#\n# MyFramework.embeddedframework\n# |-- MyFramework.framework\n# |   |-- MyFramework -> Versions/Current/MyFramework\n# |   |-- Headers -> Versions/Current/Headers\n# |   |-- Resources -> Versions/Current/Resources\n# |   `-- Versions\n# |       |-- A\n# |       |   |-- MyFramework\n# |       |   |-- Headers\n# |       |   |   `-- MyFramework.h\n# |       |   `-- Resources\n# |       |       |-- Info.plist\n# |       |       |-- MyViewController.nib\n# |       |       `-- en.lproj\n# |       |           `-- InfoPlist.strings\n# |       `-- Current -> A\n# `-- Resources\n#     `-- MyViewController.nib -> ../MyFramework.framework/Resources/MyViewController.nib\n#\ndef build_embedded_framework(project):\n    fw_path = project.local_built_fw_path\n    embedded_path = project.local_built_embedded_fw_path\n    fw_name = os.environ['WRAPPER_NAME']\n\n    if (os.path.islink(fw_path)):\n        # If the framework path is a link, the build result already in embeddedframework.\n        # Just recreate embeddedframework's Resources\n        remove_path(os.path.join(embedded_path, \"Resources\"))\n    else:\n        remove_path(embedded_path)\n        ensure_path_exists(embedded_path)\n        copy_overwrite(fw_path, os.path.join(embedded_path, fw_name))\n\n    # Create embeddedframework's Resources        \n    ensure_path_exists(os.path.join(embedded_path, \"Resources\"))\n    symlink_source = os.path.join(\"..\", fw_name, \"Resources\")\n    symlink_path = os.path.join(embedded_path, \"Resources\")\n    if os.path.isdir(os.path.join(fw_path, \"Resources\")):\n        for file in filter(lambda x: x != \"Info.plist\" and not x.endswith(\".lproj\"), os.listdir(os.path.join(fw_path, \"Resources\"))):\n            attempt_symlink(os.path.join(symlink_path, file), os.path.join(symlink_source, file))\n\n    # Remove the normal framework and replace it with a symlink to the copy\n    # in the embedded framework. This is needed because Xcode runs its strip\n    # phase AFTER the script runs.\n    embed_fw_wrapper = os.path.splitext(os.environ['WRAPPER_NAME'])[0] + \".embeddedframework\"\n    remove_path(fw_path)\n    attempt_symlink(fw_path, os.path.join(embed_fw_wrapper, os.environ['WRAPPER_NAME']))\n\n\n# Run the build process in slave mode to build the other configuration\n# (device/simulator).\n#\ndef run_slave_build(project):\n    print_and_call_slave_build(project.get_slave_project_build_command(), project.other_platform)\n\n# Run the build process.\n#\ndef run_build():\n    project = Project(os.path.join(os.environ['PROJECT_FILE_PATH'], \"project.pbxproj\"))\n\n    # Issue warnings only if we're master.\n    if is_master():\n        if len(project.compilable_sources) == 0:\n            raise Exception(\"No compilable sources found. Please add at least one source file to build target %s.\" % os.environ['TARGET_NAME'])\n\n        if config_warn_derived_data:\n            check_for_derived_data_in_search_paths(project)\n        if config_warn_no_public_headers and len(project.public_headers) == 0:\n            issue_warning('No headers in build target %s were marked public. Please move at least one header to \"Public\" in the \"Copy Headers\" build phase.' % os.environ['TARGET_NAME'])\n\n    # Only build slave if this is an archive build.\n    if is_archive_build():\n        if is_master():\n            log.debug(\"Building as MASTER\")\n            # The slave-side linker tries to include this (nonexistent) path as\n            # a library path.\n            ensure_path_exists(project.get_slave_environment()['BUILT_PRODUCTS_DIR'])\n            project.build_state.persist()\n            run_slave_build(project)\n            project.build_state.reload()\n        else:\n            log.debug(\"Building as SLAVE\")\n            project.build_state.reload()\n            project.build_state.set_slave_properties(project.local_architectures,\n                                                     project.local_linked_archive_paths,\n                                                     project.local_built_fw_path,\n                                                     project.local_built_embedded_fw_path)\n            project.build_state.persist()\n\n    link_local_archs(project)\n    \n    # Only do a universal binary when building an archive.\n    if is_archive_build() and is_master():\n        link_combine_all_archs(project)\n    else:\n        link_combine_local_archs(project)\n\n    if config_deep_header_hierarchy:\n        build_deep_header_hierarchy(project)\n\n    add_symlinks_to_framework(project)\n    \n    if is_master():\n        if config_framework_type == 'embeddedframework':\n            build_embedded_framework(project)\n        elif config_framework_type != 'framework':\n            raise Exception(\"%s: Unknown framework type for config_framework_type\" % config_framework_type)\n\n\nif __name__ == \"__main__\":\n    log_handler = logging.StreamHandler()\n    log_handler.setFormatter(logging.Formatter(\"%(name)s (\" + os.environ['PLATFORM_NAME'] + \"): %(levelname)s: %(message)s\"))\n    log.addHandler(log_handler)\n    log.setLevel(config_log_level)\n\n    error_code = 0\n    prefix = \"M\" if is_master() else \"S\"\n    log_handler.setFormatter(logging.Formatter(\"%(name)s (\" + prefix + \" \" + os.environ['PLATFORM_NAME'] + \"): %(levelname)s: %(message)s\"))\n\n    log.debug(\"Begin build process\")\n\n    if config_deep_header_top:\n        config_deep_header_top = string.Template(config_deep_header_top).substitute(os.environ)\n\n    try:\n        run_build()\n        if issued_warnings:\n            if config_fail_on_warnings:\n                error_code = 1\n            log.warn(\"Build completed with warnings\")\n        else:\n            log.info(\"Build completed\")\n        if not is_archive_build():\n            log.info(\"Note: This is *NOT* a universal framework build. To build as a universal framework, do an archive build.\")\n            log.info(\"To do an archive build from command line, use \\\"xcodebuild -configuration Release UFW_ACTION=archive clean build\\\"\")\n    except Exception:\n        traceback.print_exc(file=sys.stdout)\n        error_code = 1\n        log.error(\"Build failed\")\n    finally:\n        if error_code == 0 and is_archive_build() and is_master():\n            log.info(\"Built framework is in \" + os.environ['TARGET_BUILD_DIR'])\n            if should_open_build_dir():\n                open_build_dir()\n        sys.exit(error_code)\n";
			showEnvVarsInLog = 0;
		};
/* End PBXShellScriptBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		0B2C873E184F6CFD0056A291 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				0B2C875E184F703D0056A291 /* index.mm in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		0BBBDE2C18506B61006A1BD1 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				0BBBDE5718506B91006A1BD1 /* say_hi.c in Sources */,
				0BBBDE3C18506B61006A1BD1 /* finalUniByTemplate.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		0BBBDE3D18506B61006A1BD1 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				0BBBDE5018506B61006A1BD1 /* finalUniByTemplateTests.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		6BD45587184CC1E000581686 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				6BD455B6184CC4D300581686 /* say_hi.c in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		6BD45597184CC1E000581686 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				6BD455B7184CC4D300581686 /* say_hi.c in Sources */,
				6BD455AB184CC1E000581686 /* lib_outof_workspaceTests.m in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
		6BD455B8184CCBBD00581686 /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				6BD455C9184CCDAB00581686 /* say_hi.c in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin PBXTargetDependency section */
		0B2C874F184F6D120056A291 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = 0B0F938D184F64FC00A0874A /* merge2libs */;
			targetProxy = 0B2C874E184F6D120056A291 /* PBXContainerItemProxy */;
		};
		0BBBDE4718506B61006A1BD1 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = 0BBBDE3118506B61006A1BD1 /* finalUniByTemplate */;
			targetProxy = 0BBBDE4618506B61006A1BD1 /* PBXContainerItemProxy */;
		};
		6BD455A2184CC1E000581686 /* PBXTargetDependency */ = {
			isa = PBXTargetDependency;
			target = 6BD4558A184CC1E000581686 /* lib-outof-workspace */;
			targetProxy = 6BD455A1184CC1E000581686 /* PBXContainerItemProxy */;
		};
/* End PBXTargetDependency section */

/* Begin PBXVariantGroup section */
		0B2C8747184F6CFE0056A291 /* InfoPlist.strings */ = {
			isa = PBXVariantGroup;
			children = (
				0B2C8748184F6CFE0056A291 /* en */,
			);
			name = InfoPlist.strings;
			sourceTree = "<group>";
		};
		0BBBDE3618506B61006A1BD1 /* InfoPlist.strings */ = {
			isa = PBXVariantGroup;
			children = (
				0BBBDE3718506B61006A1BD1 /* en */,
			);
			name = InfoPlist.strings;
			sourceTree = "<group>";
		};
		0BBBDE4C18506B61006A1BD1 /* InfoPlist.strings */ = {
			isa = PBXVariantGroup;
			children = (
				0BBBDE4D18506B61006A1BD1 /* en */,
			);
			name = InfoPlist.strings;
			sourceTree = "<group>";
		};
		6BD455A7184CC1E000581686 /* InfoPlist.strings */ = {
			isa = PBXVariantGroup;
			children = (
				6BD455A8184CC1E000581686 /* en */,
			);
			name = InfoPlist.strings;
			sourceTree = "<group>";
		};
		6BD455C2184CCBBD00581686 /* InfoPlist.strings */ = {
			isa = PBXVariantGroup;
			children = (
				6BD455C3184CCBBD00581686 /* en */,
			);
			name = InfoPlist.strings;
			sourceTree = "<group>";
		};
/* End PBXVariantGroup section */

/* Begin XCBuildConfiguration section */
		0B0F938F184F64FC00A0874A /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				PRODUCT_NAME = "$(TARGET_NAME)";
				SDKROOT = iphoneos;
			};
			name = Debug;
		};
		0B0F9390184F64FC00A0874A /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				PRODUCT_NAME = "$(TARGET_NAME)";
				SDKROOT = iphoneos;
			};
			name = Release;
		};
		0B27DF2A1850254D00C8B7F8 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Debug;
		};
		0B27DF2B1850254D00C8B7F8 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				PRODUCT_NAME = "$(TARGET_NAME)";
			};
			name = Release;
		};
		0B2C874C184F6CFE0056A291 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				COMBINE_HIDPI_IMAGES = YES;
				DEAD_CODE_STRIPPING = NO;
				GCC_ENABLE_OBJC_EXCEPTIONS = YES;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "uniSay/uniSay-Prefix.pch";
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				INFOPLIST_FILE = "uniSay/uniSay-Info.plist";
				INSTALL_PATH = "$(LOCAL_LIBRARY_DIR)/Bundles";
				LIBRARY_SEARCH_PATHS = (
					"$(inherited)",
					"/Users/VCTL01/proj/self/iOS_trick/staticlib_workspace/lib-outof-workspace/DerivedData/lib-outof-workspace/Build/Products/Debug-universal",
				);
				LINK_WITH_STANDARD_LIBRARIES = NO;
				MACH_O_TYPE = mh_object;
				MACOSX_DEPLOYMENT_TARGET = "";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SDKROOT = iphoneos;
				TARGETED_DEVICE_FAMILY = "1,2";
				WRAPPER_EXTENSION = framework;
			};
			name = Debug;
		};
		0B2C874D184F6CFE0056A291 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				COMBINE_HIDPI_IMAGES = YES;
				DEAD_CODE_STRIPPING = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				GCC_ENABLE_OBJC_EXCEPTIONS = YES;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "uniSay/uniSay-Prefix.pch";
				INFOPLIST_FILE = "uniSay/uniSay-Info.plist";
				INSTALL_PATH = "$(LOCAL_LIBRARY_DIR)/Bundles";
				LIBRARY_SEARCH_PATHS = (
					"$(inherited)",
					"/Users/VCTL01/proj/self/iOS_trick/staticlib_workspace/lib-outof-workspace/DerivedData/lib-outof-workspace/Build/Products/Debug-universal",
				);
				LINK_WITH_STANDARD_LIBRARIES = NO;
				MACH_O_TYPE = mh_object;
				MACOSX_DEPLOYMENT_TARGET = "";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SDKROOT = iphoneos;
				TARGETED_DEVICE_FAMILY = "1,2";
				WRAPPER_EXTENSION = framework;
			};
			name = Release;
		};
		0BBBDE5118506B61006A1BD1 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ARCHS = "$(ARCHS_STANDARD_INCLUDING_64_BIT)";
				CONTENTS_FOLDER_PATH = "$(WRAPPER_NAME)/Versions/$(FRAMEWORK_VERSION)";
				DEAD_CODE_STRIPPING = NO;
				DYLIB_COMPATIBILITY_VERSION = 1;
				DYLIB_CURRENT_VERSION = 1;
				FRAMEWORK_VERSION = A;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "finalUniByTemplate/finalUniByTemplate-Prefix.pch";
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				INFOPLIST_FILE = "finalUniByTemplate/finalUniByTemplate-Info.plist";
				INFOPLIST_PATH = "$(UNLOCALIZED_RESOURCES_FOLDER_PATH)/Info.plist";
				INSTALL_PATH = "$(BUILT_PRODUCTS_DIR)";
				LINK_WITH_STANDARD_LIBRARIES = NO;
				MACH_O_TYPE = mh_object;
				ONLY_ACTIVE_ARCH = YES;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SKIP_INSTALL = YES;
				UNLOCALIZED_RESOURCES_FOLDER_PATH = "$(CONTENTS_FOLDER_PATH)/Resources";
				WRAPPER_EXTENSION = framework;
			};
			name = Debug;
		};
		0BBBDE5218506B61006A1BD1 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ARCHS = "$(ARCHS_STANDARD_INCLUDING_64_BIT)";
				CONTENTS_FOLDER_PATH = "$(WRAPPER_NAME)/Versions/$(FRAMEWORK_VERSION)";
				DEAD_CODE_STRIPPING = NO;
				DYLIB_COMPATIBILITY_VERSION = 1;
				DYLIB_CURRENT_VERSION = 1;
				FRAMEWORK_VERSION = A;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "finalUniByTemplate/finalUniByTemplate-Prefix.pch";
				INFOPLIST_FILE = "finalUniByTemplate/finalUniByTemplate-Info.plist";
				INFOPLIST_PATH = "$(UNLOCALIZED_RESOURCES_FOLDER_PATH)/Info.plist";
				INSTALL_PATH = "$(BUILT_PRODUCTS_DIR)";
				LINK_WITH_STANDARD_LIBRARIES = NO;
				MACH_O_TYPE = mh_object;
				PRODUCT_NAME = "$(TARGET_NAME)";
				SKIP_INSTALL = YES;
				UNLOCALIZED_RESOURCES_FOLDER_PATH = "$(CONTENTS_FOLDER_PATH)/Resources";
				WRAPPER_EXTENSION = framework;
			};
			name = Release;
		};
		0BBBDE5318506B61006A1BD1 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ARCHS = "$(ARCHS_STANDARD_INCLUDING_64_BIT)";
				BUNDLE_LOADER = "$(BUILT_PRODUCTS_DIR)/SayHi.framework/SayHi";
				FRAMEWORK_SEARCH_PATHS = (
					"$(SDKROOT)/Developer/Library/Frameworks",
					"$(inherited)",
					"$(DEVELOPER_FRAMEWORKS_DIR)",
				);
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "finalUniByTemplate/finalUniByTemplate-Prefix.pch";
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				INFOPLIST_FILE = "finalUniByTemplateTests/finalUniByTemplateTests-Info.plist";
				ONLY_ACTIVE_ARCH = YES;
				OTHER_LDFLAGS = (
					"-framework",
					SenTestingKit,
					"-framework",
					"$(UFW_FAKE_FRAMEWORK_NAME)",
				);
				PRODUCT_NAME = "$(TARGET_NAME)";
				TEST_HOST = "$(BUNDLE_LOADER)";
				UFW_FAKE_FRAMEWORK_NAME = finalUniByTemplate;
				WRAPPER_EXTENSION = xctest;
			};
			name = Debug;
		};
		0BBBDE5418506B61006A1BD1 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ARCHS = "$(ARCHS_STANDARD_INCLUDING_64_BIT)";
				BUNDLE_LOADER = "$(BUILT_PRODUCTS_DIR)/SayHi.framework/SayHi";
				FRAMEWORK_SEARCH_PATHS = (
					"$(SDKROOT)/Developer/Library/Frameworks",
					"$(inherited)",
					"$(DEVELOPER_FRAMEWORKS_DIR)",
				);
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "finalUniByTemplate/finalUniByTemplate-Prefix.pch";
				INFOPLIST_FILE = "finalUniByTemplateTests/finalUniByTemplateTests-Info.plist";
				OTHER_LDFLAGS = (
					"-framework",
					SenTestingKit,
					"-framework",
					"$(UFW_FAKE_FRAMEWORK_NAME)",
				);
				PRODUCT_NAME = "$(TARGET_NAME)";
				TEST_HOST = "$(BUNDLE_LOADER)";
				UFW_FAKE_FRAMEWORK_NAME = finalUniByTemplate;
				WRAPPER_EXTENSION = xctest;
			};
			name = Release;
		};
		6BD455AC184CC1E000581686 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ARCHS = "$(ARCHS_STANDARD_INCLUDING_64_BIT)";
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = NO;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_DYNAMIC_NO_PIC = NO;
				GCC_INPUT_FILETYPE = sourcecode.c.c;
				GCC_OPTIMIZATION_LEVEL = 0;
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				GCC_SYMBOLS_PRIVATE_EXTERN = NO;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 7.0;
				ONLY_ACTIVE_ARCH = NO;
				SDKROOT = iphoneos;
			};
			name = Debug;
		};
		6BD455AD184CC1E000581686 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				ARCHS = "$(ARCHS_STANDARD_INCLUDING_64_BIT)";
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_BOOL_CONVERSION = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_ENUM_CONVERSION = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
				COPY_PHASE_STRIP = YES;
				ENABLE_NS_ASSERTIONS = NO;
				GCC_C_LANGUAGE_STANDARD = gnu99;
				GCC_INPUT_FILETYPE = sourcecode.c.c;
				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNDECLARED_SELECTOR = YES;
				GCC_WARN_UNINITIALIZED_AUTOS = YES;
				GCC_WARN_UNUSED_FUNCTION = YES;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 7.0;
				ONLY_ACTIVE_ARCH = NO;
				SDKROOT = iphoneos;
				VALIDATE_PRODUCT = YES;
			};
			name = Release;
		};
		6BD455AF184CC1E000581686 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				DSTROOT = /tmp/lib_outof_workspace.dst;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "lib-outof-workspace/lib-outof-workspace-Prefix.pch";
				ONLY_ACTIVE_ARCH = NO;
				OTHER_LDFLAGS = "-ObjC";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SKIP_INSTALL = YES;
			};
			name = Debug;
		};
		6BD455B0184CC1E000581686 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				DSTROOT = /tmp/lib_outof_workspace.dst;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "lib-outof-workspace/lib-outof-workspace-Prefix.pch";
				ONLY_ACTIVE_ARCH = NO;
				OTHER_LDFLAGS = "-ObjC";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SKIP_INSTALL = YES;
			};
			name = Release;
		};
		6BD455B2184CC1E000581686 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ARCHS = "$(ARCHS_STANDARD_INCLUDING_64_BIT)";
				BUNDLE_LOADER = "$(BUILT_PRODUCTS_DIR)/SayHi.framework/SayHi";
				FRAMEWORK_SEARCH_PATHS = (
					"$(SDKROOT)/Developer/Library/Frameworks",
					"$(inherited)",
					"$(DEVELOPER_FRAMEWORKS_DIR)",
				);
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "lib-outof-workspace/lib-outof-workspace-Prefix.pch";
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				INFOPLIST_FILE = "lib-outof-workspaceTests/lib-outof-workspaceTests-Info.plist";
				PRODUCT_NAME = "$(TARGET_NAME)";
				TEST_HOST = "$(BUNDLE_LOADER)";
				WRAPPER_EXTENSION = xctest;
			};
			name = Debug;
		};
		6BD455B3184CC1E000581686 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ARCHS = "$(ARCHS_STANDARD_INCLUDING_64_BIT)";
				BUNDLE_LOADER = "$(BUILT_PRODUCTS_DIR)/SayHi.framework/SayHi";
				FRAMEWORK_SEARCH_PATHS = (
					"$(SDKROOT)/Developer/Library/Frameworks",
					"$(inherited)",
					"$(DEVELOPER_FRAMEWORKS_DIR)",
				);
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "lib-outof-workspace/lib-outof-workspace-Prefix.pch";
				INFOPLIST_FILE = "lib-outof-workspaceTests/lib-outof-workspaceTests-Info.plist";
				PRODUCT_NAME = "$(TARGET_NAME)";
				TEST_HOST = "$(BUNDLE_LOADER)";
				WRAPPER_EXTENSION = xctest;
			};
			name = Release;
		};
		6BD455C7184CCBBD00581686 /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				COMBINE_HIDPI_IMAGES = YES;
				DEAD_CODE_STRIPPING = NO;
				GCC_ENABLE_OBJC_EXCEPTIONS = YES;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "SayHi/SayHi-Prefix.pch";
				GCC_PREPROCESSOR_DEFINITIONS = (
					"DEBUG=1",
					"$(inherited)",
				);
				INFOPLIST_FILE = "SayHi/SayHi-Info.plist";
				INSTALL_PATH = "$(LOCAL_LIBRARY_DIR)/Bundles";
				LINK_WITH_STANDARD_LIBRARIES = NO;
				MACH_O_TYPE = staticlib;
				MACOSX_DEPLOYMENT_TARGET = "";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SDKROOT = iphoneos;
				TARGETED_DEVICE_FAMILY = "1,2";
				WRAPPER_EXTENSION = framework;
			};
			name = Debug;
		};
		6BD455C8184CCBBD00581686 /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				COMBINE_HIDPI_IMAGES = YES;
				DEAD_CODE_STRIPPING = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				GCC_ENABLE_OBJC_EXCEPTIONS = YES;
				GCC_PRECOMPILE_PREFIX_HEADER = YES;
				GCC_PREFIX_HEADER = "SayHi/SayHi-Prefix.pch";
				INFOPLIST_FILE = "SayHi/SayHi-Info.plist";
				INSTALL_PATH = "$(LOCAL_LIBRARY_DIR)/Bundles";
				LINK_WITH_STANDARD_LIBRARIES = NO;
				MACH_O_TYPE = staticlib;
				MACOSX_DEPLOYMENT_TARGET = "";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SDKROOT = iphoneos;
				TARGETED_DEVICE_FAMILY = "1,2";
				WRAPPER_EXTENSION = framework;
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		0B0F938E184F64FC00A0874A /* Build configuration list for PBXAggregateTarget "merge2libs" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				0B0F938F184F64FC00A0874A /* Debug */,
				0B0F9390184F64FC00A0874A /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		0B27DF291850254D00C8B7F8 /* Build configuration list for PBXAggregateTarget "finalUni" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				0B27DF2A1850254D00C8B7F8 /* Debug */,
				0B27DF2B1850254D00C8B7F8 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		0B2C874B184F6CFE0056A291 /* Build configuration list for PBXNativeTarget "uniSay" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				0B2C874C184F6CFE0056A291 /* Debug */,
				0B2C874D184F6CFE0056A291 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		0BBBDE5518506B61006A1BD1 /* Build configuration list for PBXNativeTarget "finalUniByTemplate" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				0BBBDE5118506B61006A1BD1 /* Debug */,
				0BBBDE5218506B61006A1BD1 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
		};
		0BBBDE5618506B61006A1BD1 /* Build configuration list for PBXNativeTarget "finalUniByTemplateTests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				0BBBDE5318506B61006A1BD1 /* Debug */,
				0BBBDE5418506B61006A1BD1 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
		};
		6BD45586184CC1E000581686 /* Build configuration list for PBXProject "lib-outof-workspace" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				6BD455AC184CC1E000581686 /* Debug */,
				6BD455AD184CC1E000581686 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		6BD455AE184CC1E000581686 /* Build configuration list for PBXNativeTarget "lib-outof-workspace" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				6BD455AF184CC1E000581686 /* Debug */,
				6BD455B0184CC1E000581686 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		6BD455B1184CC1E000581686 /* Build configuration list for PBXNativeTarget "lib-outof-workspaceTests" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				6BD455B2184CC1E000581686 /* Debug */,
				6BD455B3184CC1E000581686 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		6BD455C6184CCBBD00581686 /* Build configuration list for PBXNativeTarget "SayHi" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				6BD455C7184CCBBD00581686 /* Debug */,
				6BD455C8184CCBBD00581686 /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = 6BD45583184CC1E000581686 /* Project object */;
}
